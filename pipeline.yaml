name: IoT Anomaly Detection CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: python -m pytest tests/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [iot_simulator, kafka_producer, spark_streaming, anomaly_detection, sagemaker_training]
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: iot-anomaly-${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Update docker-compose.yml
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        sed -i 's|build: ./iot_simulator|image: $ECR_REGISTRY/iot-anomaly-iot_simulator:$IMAGE_TAG|' docker-compose.yml
        sed -i 's|build: ./kafka_producer|image: $ECR_REGISTRY/iot-anomaly-kafka_producer:$IMAGE_TAG|' docker-compose.yml
        sed -i 's|build: ./spark_streaming|image: $ECR_REGISTRY/iot-anomaly-spark_streaming:$IMAGE_TAG|' docker-compose.yml
        sed -i 's|build: ./anomaly_detection|image: $ECR_REGISTRY/iot-anomaly-anomaly_detection:$IMAGE_TAG|' docker-compose.yml
        sed -i 's|build: ./sagemaker|image: $ECR_REGISTRY/iot-anomaly-sagemaker_training:$IMAGE_TAG|' docker-compose.yml
    - name: Copy docker-compose.yml to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        echo "$EC2_SSH_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem
        scp -i ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yml ec2-user@$EC2_HOST:~/docker-compose.yml
    - name: Deploy to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << EOF
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
          export S3_BUCKET=$S3_BUCKET
          docker-compose down
          docker-compose pull
          docker-compose up -d
        EOF

  train-model:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Train SageMaker model
      env:
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
      run: |
        pip install boto3 sagemaker
        python sagemaker/train.py --bucket $S3_BUCKET