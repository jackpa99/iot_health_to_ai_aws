name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: iot-ecr
  ECS_CLUSTER: iot-cluster
  ECS_SERVICE: iot-anomaly-detection
  ECS_TASK_DEFINITION: .aws/task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          ECR_REGISTRY='{{secrets.ECR_REPOSITORY}}''
          ECR_REPOSITORY=iot-repo
          IMAGE_TAG=${{ github.sha }}
          
          echo "ECR_REGISTRY=${ECR_REGISTRY}"
          echo "ECR_REPOSITORY=${ECR_REPOSITORY}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG,,}
          docker build -t $IMAGE_URI ./iot_simulator
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Create task definition file
        run: |
          echo '${{ secrets.ECS_TASK_DEFINITION }}' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: iot-anomaly-detection
          image: ${{ env.IMAGE_URI }}

      - name: Create ECS Service if not exists
        env:
          CLUSTER_NAME: iot-cluster
          SERVICE_NAME: iot-anomaly-detection
          TASK_DEFINITION: ${{ steps.task-def.outputs.task-definition }}
        run: |
          if ! aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME | grep $SERVICE_NAME; then
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEFINITION \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[PublicSubnet1,PublicSubnet2],securityGroups=[Dev-EC2-SG],assignPublicIp=ENABLED}"
          else
            echo "Service $SERVICE_NAME already exists"
          fi

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: iot-anomaly-detection
          cluster: iot-cluster
          wait-for-service-stability: true
