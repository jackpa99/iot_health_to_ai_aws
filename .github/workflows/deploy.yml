name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: iot-ecr
  ECS_CLUSTER: iot-cluster
  ECS_SERVICE: iot-anomaly-detection
  xECS_TASK_DEFINITION: .aws/task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          ECR_REPOSITORY=${{secrets.ECR_REPOSITORY}}
          IMAGE_TAG=${{ github.sha }}
          
          echo "ECR_REPOSITORY=${ECR_REPOSITORY}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          
          IMAGE_URI=$ECR_REPOSITORY:${IMAGE_TAG,,}
          docker build -t $IMAGE_URI ./iot_simulator
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Create task definition file
        run: |
          echo '${{ secrets.ECS_TASK_DEFINITION }}' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: iot-anomaly-detection
          image: ${{ env.IMAGE_URI }}

      - name: Check if ECS Service Exists
        id: check-service
        run: |
          aws ecs describe-services --cluster iot-cluster --services iot-anomaly-detection --query "services[0].serviceName" --output text || echo "MISSING"

      - name: Create or Update ECS Service
        id: create-update-service
        run: |
          if [ "${{ steps.check-service.outputs.result }}" = "MISSING" ]; then
            echo "Creating new ECS service"
            aws ecs create-service \
              --cluster iot-cluster \
              --service-name iot-anomaly-detection \
              --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[PublicSubnet1,PublicSubnet2],securityGroups=[Dev-EC2-SG],assignPublicIp=ENABLED}"
          else
            echo "Updating existing ECS service"
            aws ecs update-service \
              --cluster iot-cluster \
              --service iot-anomaly-detection \
              --task-definition ${{ steps.task-def.outputs.task-definition-arn }}
          fi


      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: iot-anomaly-detection
          cluster: iot-cluster
          wait-for-service-stability: true
