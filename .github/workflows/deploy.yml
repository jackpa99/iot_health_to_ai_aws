name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: iot-cluster
  ECS_SERVICE: iot-anomaly-detection-service
  STACK_NAME: iot-repaveable-stack
  EnvironmentName: Dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY='iot-ecr'
          IMAGE_TAG=${{ github.sha }}
          
          echo "ECR_REPOSITORY=${ECR_REPOSITORY}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          docker build -t $IMAGE_URI ./iot_simulator
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
     
      - name: Replace placeholders in task definition
        env:
          AWS_AC: ${{ secrets.AWS_AC }}
        run: |
          envsubst < .aws/task-definition-template.json > task-definition.json
          cat task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: iot-anomaly-detection
          image: ${{ env.IMAGE_URI }}

      - name: Register Task Definition
        run: |
          TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json file://task-definition.json)
          TASK_DEFINITION_ARN=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Debug Task Definition
        run: |
          echo "********>>>> Task Definition ARN: ${{ env.TASK_DEFINITION_ARN }}"
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_ARN }}  

      - name: Retrieve stack outputs
        id: cf-outputs
        run: |
          aws cloudformation describe-stacks --stack-name iot-repaveable-stack --query 'Stacks[0].Outputs' --output json
          outputs=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME}} --query 'Stacks[0].Outputs[?ExportName!=`null` && ( ends_with(ExportName, `EC2SecurityGroup`) || ends_with(ExportName, `PUB-NETS`))].{key: ExportName, value: OutputValue}' --output json)
          echo "================ stack outputs formatted to git env =============="
          echo "$outputs" 
          echo "$outputs" | jq -r '.[] | .key + "=" + .value' >> $GITHUB_OUTPUT

      - name: Substitute AWS Account ID
        run: |
          sed -i 's/PLACEHOLDER_ACCOUNT_ID/${{ secrets.AWS_AC }}/g' ecs-task-execution-role-template.yml

      - name: Check if ECS Service Exists
        id: check-service
        run: |
          result=$(aws ecs describe-services --cluster ${{env.ECS_CLUSTER}} --services ${{env.ECS_SERVICE}} --query "services[0].serviceName" --output text || echo "MISSING")
          echo "result=$result" >> $GITHUB_OUTPUT

      - name: Create or Update ECS Service
        run: |
          if [ "${{ steps.check-service.outputs.result }}" = "None" ] || [ "${{ steps.check-service.outputs.result }}" = "Missing" ]; then
            SECURITY_GROUP_ID="${{ steps.cf-outputs.outputs.Dev-EC2SecurityGroup }}"    
            PUBLIC_SUBNET_IDS="${{ steps.cf-outputs.outputs.Dev-PUB-NETS }}" 
            # Debug: Print the substituted subnet value
            SUBNETS_SUBSTITUTED=$(echo $PUBLIC_SUBNET_IDS | sed "s/,/','/g; s/^/'/; s/$/'/")
            echo "Subnets after substitution: $SUBNETS_SUBSTITUTED"
            echo "Creating new ECS service"
            echo "Public Subnet ID: $PUBLIC_SUBNET_IDS"
            echo "EC2 Security Group ID: $SECURITY_GROUP_ID"
            output_crt="aws ecs create-service \
              --cluster ${ECS_CLUSTER} \
              --service-name ${ECS_SERVICE} \
              --task-definition ${TASK_DEFINITION_ARN} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration \"awsvpcConfiguration={subnets=[ ${SUBNETS_SUBSTITUTED} ],securityGroups=[ '$SECURITY_GROUP_ID' ],assignPublicIp='ENABLED'}\""
            echo $output_crt 
            $output_crt
          else
            echo "Updating existing ECS service"
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.TASK_DEFINITION_ARN }} 
          fi